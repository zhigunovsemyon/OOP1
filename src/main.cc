/*Разработать структуру элементов данных класса в виде дин.структуры данных.
Разработать:
    *конструкторы для различных типов входных данных (без параметров, параметр-
    строка, параметр-массив), конструктор копирования (объект из объекта) и
    деструктор;

    *методы ввода и вывода содержимого объекта в поток (на экран), в текстовую
    строку (из строки);

    *получения ссылки на внутренние данные объекта (например на коэффициент
    матрицы), либо чтение/запись отдельных компонент объекта.

В конструкторе и деструкторе предусмотреть трассировку -- вывод адреса текущего
объекта и его содержимого. Проследить последовательность вызова конструкторов и
деструкторов при определении глобальных, локальных, динамических объектов, а
также их массивов, при передаче объекта в виде форм. пар-ра по умолчанию и
возврате его по зн. в качестве результата.*/

#include "matr.h"   /* Матрица */
#include <climits>  /*INT_MAX INT_MIN*/
#include <ctime>    /*time()*/
#include <iostream> /*cout*/

int main(void) {
	// Инициализация генератора случайных чисел
	std::srand(static_cast<unsigned int>(std::time(NULL)));

	// Создание прямоугольной матрицы
	int m, n;
	std::cout << "Число строк: ";
	std::cin >> m;
	std::cout << "Число столбцов: ";
	std::cin >> n;
	Matrix &heapm = *new Matrix(m, n);
	std::cout << "Конечные размеры матрицы: "
		<< heapm.get_line_count() << " на "
		<< heapm.get_column_count() << '\n';

	heapm.fill(1,-1);

	std::cout << "Матрица:\n";
	heapm.print();
	std::cout << "Э-т -1,-1 " << heapm.get_element(-1,-1) << '\n';

	delete &heapm;
	return EXIT_SUCCESS;
}
